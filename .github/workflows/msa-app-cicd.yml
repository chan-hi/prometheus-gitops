name: MSA Application CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'msa-app/**'
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: 557690584596.dkr.ecr.ap-northeast-2.amazonaws.com/gitops/msa-app
  
jobs:
  detect-changes:
    runs-on: self-hosted
    outputs:
      user-service: ${{ steps.changes.outputs.user-service }}
      order-service: ${{ steps.changes.outputs.order-service }}
      payment-service: ${{ steps.changes.outputs.payment-service }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Detect changes
      id: changes
      run: |
        # Get list of changed files
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        echo "Changed files: $CHANGED_FILES"
        
        # Check if each service has changes
        if echo "$CHANGED_FILES" | grep -q "msa-app/user-service/"; then
          echo "user-service=true" >> $GITHUB_OUTPUT
          echo "✅ user-service has changes"
        else
          echo "user-service=false" >> $GITHUB_OUTPUT
          echo "❌ user-service has no changes"
        fi
        
        if echo "$CHANGED_FILES" | grep -q "msa-app/order-service/"; then
          echo "order-service=true" >> $GITHUB_OUTPUT
          echo "✅ order-service has changes"
        else
          echo "order-service=false" >> $GITHUB_OUTPUT
          echo "❌ order-service has no changes"
        fi
        
        if echo "$CHANGED_FILES" | grep -q "msa-app/payment-service/"; then
          echo "payment-service=true" >> $GITHUB_OUTPUT
          echo "✅ payment-service has changes"
        else
          echo "payment-service=false" >> $GITHUB_OUTPUT
          echo "❌ payment-service has no changes"
        fi

  build-user-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.user-service == 'true'
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      run: |
        echo "Using local AWS credentials"
        aws sts get-caller-identity

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}

    - name: Build and push user-service
      run: |
        echo "🔨 Building user-service..."
        cd msa-app/user-service
        docker build -t ${{ env.ECR_REPOSITORY }}:user-service-${{ github.sha }} .
        docker tag ${{ env.ECR_REPOSITORY }}:user-service-${{ github.sha }} ${{ env.ECR_REPOSITORY }}:user-service-latest
        
        echo "📤 Pushing user-service to ECR..."
        docker push ${{ env.ECR_REPOSITORY }}:user-service-${{ github.sha }}
        docker push ${{ env.ECR_REPOSITORY }}:user-service-latest

  build-order-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.order-service == 'true'
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      run: |
        echo "Using local AWS credentials"
        aws sts get-caller-identity

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}

    - name: Build and push order-service
      run: |
        echo "🔨 Building order-service..."
        cd msa-app/order-service
        docker build -t ${{ env.ECR_REPOSITORY }}:order-service-${{ github.sha }} .
        docker tag ${{ env.ECR_REPOSITORY }}:order-service-${{ github.sha }} ${{ env.ECR_REPOSITORY }}:order-service-latest
        
        echo "📤 Pushing order-service to ECR..."
        docker push ${{ env.ECR_REPOSITORY }}:order-service-${{ github.sha }}
        docker push ${{ env.ECR_REPOSITORY }}:order-service-latest

  build-payment-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.payment-service == 'true'
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      run: |
        echo "Using local AWS credentials"
        aws sts get-caller-identity

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}

    - name: Build and push payment-service
      run: |
        echo "🔨 Building payment-service..."
        cd msa-app/payment-service
        docker build -t ${{ env.ECR_REPOSITORY }}:payment-service-${{ github.sha }} .
        docker tag ${{ env.ECR_REPOSITORY }}:payment-service-${{ github.sha }} ${{ env.ECR_REPOSITORY }}:payment-service-latest
        
        echo "📤 Pushing payment-service to ECR..."
        docker push ${{ env.ECR_REPOSITORY }}:payment-service-${{ github.sha }}
        docker push ${{ env.ECR_REPOSITORY }}:payment-service-latest

  update-manifests:
    needs: [detect-changes, build-user-service, build-order-service, build-payment-service]
    if: always() && (needs.build-user-service.result == 'success' || needs.build-order-service.result == 'success' || needs.build-payment-service.result == 'success' || needs.build-user-service.result == 'skipped' || needs.build-order-service.result == 'skipped' || needs.build-payment-service.result == 'skipped')
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Update Kubernetes manifests
      run: |
        UPDATED_SERVICES=""
        
        # Only update manifests for services that were actually built
        if [[ "${{ needs.detect-changes.outputs.user-service }}" == "true" ]]; then
          echo "🔄 Updating user-service manifest..."
          sed -i 's|${{ env.ECR_REPOSITORY }}:user-service-.*|${{ env.ECR_REPOSITORY }}:user-service-${{ github.sha }}|g' msa-demo/k8s-manifests-final.yaml
          UPDATED_SERVICES="$UPDATED_SERVICES user-service"
        fi
        
        if [[ "${{ needs.detect-changes.outputs.order-service }}" == "true" ]]; then
          echo "🔄 Updating order-service manifest..."
          sed -i 's|${{ env.ECR_REPOSITORY }}:order-service-.*|${{ env.ECR_REPOSITORY }}:order-service-${{ github.sha }}|g' msa-demo/k8s-manifests-final.yaml
          UPDATED_SERVICES="$UPDATED_SERVICES order-service"
        fi
        
        if [[ "${{ needs.detect-changes.outputs.payment-service }}" == "true" ]]; then
          echo "🔄 Updating payment-service manifest..."
          sed -i 's|${{ env.ECR_REPOSITORY }}:payment-service-.*|${{ env.ECR_REPOSITORY }}:payment-service-${{ github.sha }}|g' msa-demo/k8s-manifests-final.yaml
          UPDATED_SERVICES="$UPDATED_SERVICES payment-service"
        fi
        
        echo "Updated services: $UPDATED_SERVICES"
        echo "UPDATED_SERVICES=$UPDATED_SERVICES" >> $GITHUB_ENV

    - name: Update ECR secret
      run: |
        # Update ECR secret for Kubernetes cluster
        kubectl delete secret ecr-secret -n msa-demo --ignore-not-found=true
        kubectl create secret docker-registry ecr-secret \
          --docker-server=${{ env.ECR_REPOSITORY }} \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region ${{ env.AWS_REGION }}) \
          --namespace=msa-demo

    - name: Commit and push updated manifests
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add msa-demo/k8s-manifests-final.yaml
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          if [[ -n "$UPDATED_SERVICES" ]]; then
            git commit -m "Update images for:$UPDATED_SERVICES to SHA ${{ github.sha }}"
          else
            git commit -m "Update manifests to SHA ${{ github.sha }}"
          fi
          git push
        fi

    - name: Trigger ArgoCD Sync
      run: |
        if [[ -n "$UPDATED_SERVICES" ]]; then
          echo "🚀 Triggering ArgoCD sync for updated services:$UPDATED_SERVICES"
          sleep 15  # Wait for git push to complete
          curl -k -X POST https://192.168.49.2:30169/api/v1/applications/msa-demo/sync \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{}'
        else
          echo "No services updated, skipping ArgoCD sync"
        fi